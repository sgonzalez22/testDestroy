/**
 * JavaCC file
 */
 
options {
  IGNORE_CASE = false;
  STATIC = false;
}
PARSER_BEGIN(ParserProlog)
package uniandes.teolen.parserJavaCC.parserProlog;

import java.util.*;
 
public class ParserProlog {

} 

PARSER_END(ParserProlog)

SKIP :
{
 	" " | "\r" | "\t" | "\n"

}
TOKEN : /* OPERATORS */
{
	 <ARROW: ":-">
| < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
}


TOKEN :
{
    < INT: ( <DIGIT> )( <DIGIT> )* >
|   < #DIGIT: "0" | "1" | "2"| "3" | "4" | "5" |  "6" | "7" | "8" |"9" >
|   < #MAY: ["A"-"Z"] >
|   < #MIN: ["a"-"z"] >
|   < #IS1: ["i","s"] >
|   < VAR: ( <MAY>  ( <MAY > | < MIN >)* )>
|   < NOMB: ( <MIN>  ( <MAY > | < MIN >)* )>
|   < IS: ( <IS1>)>
}

void hr():
{}
{
  functor() (<ARROW>  functor1() (","  functor1())*)? <IS> functor() (","  functor())*)"."
	}

void functor():
{}
{
(
//token is F O A Y F VA HACIA UN FUNTOR O ASIGNACION
//cortar  y pegar de exp
  	< NOMB> ("(" arg() (","  arg())* ")")?
)
	
}
void functor1():
{}
{
(

  	< NOMB> ("(" arg() (","  arg())* ")")?
)
	
}
void arg():
{}
{
  < INT > | functor() | list() | < VAR >
}

void list() throws Error:
{}

{

"[" (arg() (","  arg())* ("|" arg())?)? "]"}
  
